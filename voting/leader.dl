.input clientIn `repeat_iter([("vote".to_string(),),])`
.output stdout `for_each(|_:(String,)| println!("voted"))`
.input replicas `repeat_iter(peers.clone()) -> map(|p| (p,))`

.async voteToReplica `map(|(node_id, v)| (node_id, serialize_to_bytes(v))) -> dest_sink(to_replica_sink)` `null::<(String,)>()`
.async voteFromReplica `null::<(u32,String,)>()` `source_stream(from_replica_source) -> map(|v| deserialize_from_bytes::<(u32,String,)>(v.unwrap()).unwrap())`
        
voteToReplica@addr(v) :~ clientIn(v), replicas(addr)
allVotes(s, v) :- voteFromReplica(s, v)
allVotes(s, v) :+ allVotes(s, v)
voteCounts(count(l), v) :- allVotes(l, v)
numReplicas(count(addr)) :- replicas(addr)
stdout(v) :- clientIn(v), voteCounts(n, v), numReplicas(n)