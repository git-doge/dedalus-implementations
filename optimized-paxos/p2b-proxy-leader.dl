######################## relation definitions
# EDB
.input id `repeat_iter([(my_id,),])`
.input quorum `repeat_iter([(f+1,),])`
.input fullQuorum `repeat_iter([(2*f+1,),])`
.input acceptorStartIDs `repeat_iter(acceptor_start_ids.clone()) -> map(|p| (p,))` # Assume = 0,m,2m,...,(n-1)*m, for n acceptors and m partitions
.input numAcceptorGroups `repeat_iter([(num_acceptor_groups,),])`
.input numP2bProxyLeaders `repeat_iter([(num_p2b_proxy_leaders,),])`
.input proposer `repeat_iter([(proposer,),])` # The proposer this proxy leader was decoupled from
.input tick `repeat_iter(vec![()]) -> map(|_| (context.current_tick() as u32,))`

# Debug
.output p2bOut `for_each(|(i,a,payload,slot,id,num,max_id,max_num):(u32,u32,u32,u32,u32,u32,u32,u32,)| println!("p2bProxyLeader {:?} received p2b from acceptor: [{:?},{:?},{:?},{:?},{:?},{:?},{:?}]", i, a, payload, slot, id, num, max_id, max_num))`
.output p2bToProposerOut `for_each(|(i,pid,max_id,max_num,t1):(u32,u32,u32,u32,u32,)| println!("p2bProxyLeader {:?} sent p2b to proposer {:?}: [{:?},{:?},{:?}]", i, pid, max_id, max_num, t1))`
.output p2bToProposerOut `for_each(|(i,pid,n,t1,prev_t):(u32,u32,u32,u32,u32,)| println!("p2bProxyLeader {:?} sent inputs to proposer {:?}: [{:?},{:?},{:?}]", i, pid, n, t1, prev_t))`
.input periodic `source_stream(periodic_source) -> map(|_| ())`
.output throughputOut `for_each(|(id,num,n):(u32,u32,u32)| println!("throughput,{:?},{:?}", id, num * n))`

# p2b: acceptorID, payload, slot, ballotID, ballotNum, maxBallotID, maxBallotNum
.async p2bU `null::<(u32,u32,u32,u32,u32,u32,u32)>()` `source_stream(p2b_source) -> map(|v: Result<BytesMut, _>| deserialize_from_bytes::<(u32,u32,u32,u32,u32,u32,u32,)>(v.unwrap()).unwrap())`
# p2bToProposer: maxBallotID, maxBallotNum, t1
.async p2bToProposer `map(|(node_id, v):(u32,(u32,u32,u32))| (node_id, serialize_to_bytes(v))) -> dest_sink(p2b_to_proposer_sink)` `null::<(u32,u32,u32)>()` 
# inputs: n, t1, prevT
.async inputs `map(|(node_id, v):(u32,(u32,u32,u32))| (node_id, serialize_to_bytes(v))) -> dest_sink(inputs_sink)` `null::<(u32,u32,u32)>()` 
######################## end relation definitions


p2b(a, p, s, i, n, mi, mn) :- p2bU(a, p, s, i, n, mi, mn)
p2b(a, p, s, i, n, mi, mn) :+ p2b(a, p, s, i, n, mi, mn), !allCommit(s) # drop all p2bs if slot s is committed


# Debug
// p2bOut(i, a, payload, slot, id, num, maxID, maxNum) :- id(i), p2bU(a, payload, slot, id, num, maxID, maxNum)
// p2bToProposerOut(i, pid, mi, mn, t1) :- p2bNewBallot(mi, mn), tick(t1), proposer(pid), id(i)
// inputsOut(i, pid, n, t1, prevT) :- batchSize(n), tick(t1), batchTimes(prevT), proposer(pid), id(i)
// inputsOut(i, pid, n, t1, 0) :- batchSize(n), tick(t1), !batchTimes(prevT), proposer(pid), id(i)
throughputOut(i, num, n) :- totalCommitted(num), periodic(), id(i), numP2bProxyLeaders(n)


######################## p2bs with asymmetric decoupling
p2bUniqueBallot(mi, mn) :+ p2bU(a, p, s, i, n, mi, mn)
p2bUniqueBallot(mi, mn) :+ p2bUniqueBallot(mi, mn)
p2bNewBallot(mi, mn) :- p2bU(a, p, s, i, n, mi, mn), !p2bUniqueBallot(mi, mn)
p2bToProposer@pid(mi, mn, t1) :~ p2bNewBallot(mi, mn), tick(t1), proposer(pid)
p2bUCount(count(*)) :- p2bNewBallot(mi, mn)
batchSize(n) :- p2bUCount(n)
batchTimes(t1) :+ batchSize(n), tick(t1) # Since there's only 1 r to be batched, (n != 0) is implied
batchTimes(t1) :+ !batchSize(n), batchTimes(t1) # Persist if no batch
inputs@pid(n, t1, prevT) :~ batchSize(n), tick(t1), batchTimes(prevT), proposer(pid)
inputs@pid(n, t1, 0) :~ batchSize(n), tick(t1), !batchTimes(prevT), proposer(pid)
######################## end p2bs with asymmetric decoupling


CountMatchingP2bs(payload, slot, count(acceptorID), i, num) :- p2b(acceptorID, payload, slot, i, num, payloadBallotID, payloadBallotNum)
commit(payload, slot) :- CountMatchingP2bs(payload, slot, c, i, num), quorum(size), (c >= size)
allCommit(slot) :- CountMatchingP2bs(payload, slot, c, i, num), fullQuorum(c)
// clientOut(payload, slot) :- commit(payload, slot)
MaxCommits(max(slot)) :- commit(payload, slot)

totalCommitted(new) :+ !totalCommitted(prev), MaxCommits(new)
totalCommitted(prev) :+ totalCommitted(prev), !MaxCommits(new)
totalCommitted(new) :+ totalCommitted(prev), MaxCommits(new), (prev < new)
totalCommitted(prev) :+ totalCommitted(prev), MaxCommits(new), (prev >= new)
