.input clientIn `repeat_iter(vec![()]) -> map(|_| (context.current_tick(),))`
.output stdout `for_each(|s:(u32,)| println!("committed: {:?}", s))`
.input replicas `repeat_iter(peers.clone()) -> map(|p| (p,))`

.input periodic `source_stream(periodic_source) -> map(|_| ())`
.output throughputOut `for_each(|(num,):(u32,)| println!("committed {:?} entries", num))`

.async voteToReplica `map(|(node_id, v)| (node_id, serialize_to_bytes(v))) -> dest_sink(to_replica_sink)` `null::<(u32,)>()`
.async voteFromReplica `null::<(u32,)>()` `source_stream(from_replica_source) -> map(|v| deserialize_from_bytes::<(u32,)>(v.unwrap()).unwrap())`

voteToReplica@addr(v) :~ clientIn(v), replicas(addr)
// stdout(v) :- voteFromReplica(l, v)

NumCommits(count(v)) :- voteFromReplica(v)
totalCommitted(new) :+ !totalCommitted(prev), NumCommits(new)
totalCommitted(prev) :+ totalCommitted(prev), !NumCommits(new)
totalCommitted(prev + new) :+ totalCommitted(prev), NumCommits(new)
throughputOut(num) :- totalCommitted(num), periodic()