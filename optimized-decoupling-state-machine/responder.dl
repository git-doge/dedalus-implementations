.async toResponder `null::<(u32,i64,u32,Rc<Vec<u8>>,u32)>()` `source_stream(to_responder_source) -> map(|x: Result<(u32, BytesMut,), _>| deserialize_from_bytes::<(u32,i64,u32,Rc<Vec<u8>>,u32)>(x.unwrap().1).unwrap())`
.async orderMetadata `null::<(u32,u32)>()` `source_stream(order_metadata_source) -> map(|x: Result<(u32, BytesMut,), _>| deserialize_from_bytes::<(u32,u32)>(x.unwrap().1).unwrap())`
.async clientOut `map(|(node_id, (id, ballot, payload,))| (node_id, encrypt_and_serialize(id, ballot, payload, &mut rng, &public_key))) -> dest_sink(client_send)` `null::<(i64,u32,Rc<Vec<u8>>)>()`

outputBuffer(client, id, b, v, t1) :- toResponder(client, id, b, v, t1)
outputBuffer(client, id, b, v, t1) :+ outputBuffer(client, id, b, v, t1), !canSeal(t1)
orderMetadataBuffer(t1, prevT) :- orderMetadata(t1, prevT)
orderMetadataBuffer(t1, prevT) :+ orderMetadataBuffer(t1, prevT), !canSeal(t1)
canSeal(t1) :- outputBuffer(client, id, b, v, t1), orderMetadataBuffer(t1, prevT), sealed(prevT)
canSeal(t1) :- outputBuffer(client, id, b, v, t1), orderMetadataBuffer(t1, prevT), (prevT == 0)
sealed(t1) :+ sealed(t1), !canSeal(_)
sealed(t1) :+ canSeal(t1)

# Output current input plus hash of all previous payloads (computed in rust).
clientOut@client(id, b, v) :~ outputBuffer(client, id, b, v, t1), canSeal(t1)