.async clientIn `null::<(u32,i64,u32,Rc<Vec<u8>>)>()` `source_stream(client_recv) -> map(|x| {let input = x.unwrap(); let v = decrypt_and_deserialize(input.1, &private_key); (input.0, v.0, v.1, v.2,)})`
.async clientOut `map(|(node_id, (id, ballot, payload,))| (node_id, encrypt_and_serialize(id, ballot, payload, &mut rng, &public_key))) -> dest_sink(client_send)` `null::<(i64,u32,Rc<Vec<u8>>)>()`

# Buffer inputs, choose 1 at a time.
clientBuffer(client, id, b, v) :- clientIn(client, id, b, v)
clientBuffer(client, id, b, v) :+ clientBuffer(client, id, b, v), !nextIn(client, id)
nextIn(choose(client), choose(id)) :- clientBuffer(client, id, b, v)
nextPayload(client, id, b, v) :- nextIn(client, id), clientBuffer(client, id, b, v)

# Store 1 input and track previous input.
.persist storage
storage(v) :- nextPayload(client, id, b, v)

# Output current input plus hash of all previous payloads (computed in rust).
clientOut@client(id, b, v) :~ nextPayload(client, id, b, v)