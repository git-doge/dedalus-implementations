# Note: We'll use -1 instead of ? or "bottom" in the paper
######################## relation definitions
# EDB
.input id `repeat_iter([(my_id,),])` # Assume is 0,1,2,...
.input quorum `repeat_iter([(f+1,),])` 
.input fullQuorum `repeat_iter([(2f+1,),])` # for garbage collection
.input replicas `repeat_iter(replicas.clone()) -> map(|r| (r,))`
.input numReplicas `repeat_iter([(replicas.len(),),])`
.input clients `repeat_iter(clients.clone()) -> map(|c| (c,))`

# IDB. Note: Most channels are both source and sink
.async clientIn `null::<(Rc<Vec<u8>>,)>()` `source_stream(client_recv) -> filter_map(|x: Result<(u32, BytesMut,), _>| (deserialize(x.unwrap().1)))`
.async clientOut `map(|(node_id, (payload, seq,))| (node_id, serialize(payload, seq))) -> dest_sink(replica_send)` `null::<(Rc<Vec<u8>>, u32,)>()`

# replicaForward: id, payloadId, payload, time.
.async replicaForward `map(|(node_id, v):(u32,(u32,u32,u32,u32))| (node_id, serialize_to_bytes(v))) -> dest_sink(replica_forward_sink)` `source_stream(replica_forward_source) -> map(|v: Result<BytesMut, _>| deserialize_from_bytes::<(u32,u32,u32,u32)>(v.unwrap()).unwrap())`
# sendProposalU: id, payloadId, payload, seq.
.async sendProposalU `map(|(node_id, v):(u32,(u32,u32,u32,u32,u32))| (node_id, serialize_to_bytes(v))) -> dest_sink(send_proposal_sink)` `source_stream(send_proposal_source) -> map(|v: Result<BytesMut, _>| deserialize_from_bytes::<(u32,u32,u32,u32,u32,u32)>(v.unwrap()).unwrap())`
# sendStateU: id, phase, seq, state.
.async sendStateU `map(|(node_id, v):(u32,(u32,u32,u32,u32,i32))| (node_id, serialize_to_bytes(v))) -> dest_sink(send_state_sink)` `source_stream(send_state_source) -> map(|v: Result<BytesMut, _>| deserialize_from_bytes::<(u32,u32,u32,u32,i32)>(v.unwrap()).unwrap())`
# sendVoteU: id, phase, seq, state.
.async sendVoteU `map(|(node_id, v):(u32,(u32,u32,u32,u32,i32))| (node_id, serialize_to_bytes(v))) -> dest_sink(send_vote_sink)` `source_stream(send_vote_source) -> map(|v: Result<BytesMut, _>| deserialize_from_bytes::<(u32,u32,u32,u32,i32)>(v.unwrap()).unwrap())`
######################## end relation definitions

# Persistence rules
minPQ(i, payloadId, payload, time) :+ minPQ(i, payloadId, payload, time), !MinProposal(i, payloadId, _, _)
nextSlot(i, seq) :+ nextSlot(i, seq), !weakMVCOut(_, seq)
nextSlot(i, seq+n) :+ nextSlot(i, seq), weakMVCOut(_, seq), numReplicas(n)
proposal(i, payloadId, payload, time, seq) :+ proposal(i, payloadId, payload, time, seq), !weakMVCOut(_, seq)
log(payloadId) :+ log(payloadId), !MinProposal(_, payloadId, _, _, _)

# Start slot for each PQ = the corresponding replica ID (0 for replica 0, 1 for replica 1, etc)
nextSlot(r, r) :+ replicas(r), !nextSlot(r, _)

# While true do
MinProposalTime(i, min(time)) :- minPQ(i, payloadId, payload, time), !proposal(i, _, _, _, _)
MinProposal(i, payloadId, payload, time, seq) :- minPQ(i, payloadId, payload, time), MinProposalTime(i, time), nextSlot(i, seq)
# If this payload was decided in an earlier round, discard it (by not allowing it to be proposed)
NextProposal(i, payloadId, payload, time, seq) :- MinProposal(i, payloadId, payload, time, seq), !log(payloadId)
proposal(i, payloadId, payload, time, seq) :+ NextProposal(i, payloadId, payload, time, seq)
weakMVCIn(payloadId, time, seq) :- NextProposal(_, payloadId, payload, time, seq)
# Store output in dictionary if it doesn't match the proposal
log(payloadId) :- weakMVCOut(payloadId, seq), !proposal(_, payloadId, _, _, seq), (payloadId != -1)
minPQ(i, payloadId, payload, time) :- proposal(i, payloadId, payload, time, seq), weakMVCOut(payloadId2, seq), (payloadId != payloadId2)
clientOut@c(payload, seq) :~ weakMVCOut(payloadId, seq), proposal(_, payloadId, payload, _, seq), clients(c)
clientOut@c("", seq) :~ weakMVCOut(payloadId, seq), (payloadId == -1), clients(c)

# Upon receiving request from client
replicaForward@r(i, payloadId, payload, time) :~ clientIn(payloadId, payload, time), id(i), replicas(r)
minPQ(i, payloadId, payload, time) :- clientIn(payloadId, payload, time), id(i)
minPQ(i, payloadId, payload, time) :- replicaForward(i, payloadId, payload, time)


######################## Begin WeakMVC
# Persistence rules
# TODO: Fix persistence rules so after a quorum, new received messages are discarded. Make sure that message sends are triggered only-once.
# Don't persist any data for a sequence after that sequence has been committed (hence the !seqCommitted(seq))
sendProposal(id, payloadId, seq) :- sendProposalU(id, payloadId, seq)
sendProposal(id, payloadId, seq) :+ sendProposal(id, payloadId, seq), !seqCommitted(seq)
stateSent(ph, seq) :+ stateSent(ph, seq), !seqCommitted(seq)
sendState(id, ph, seq, st) :- sendStateU(id, ph, seq, st)
sendState(id, ph, seq, st) :+ sendState(id, ph, seq, st), !seqCommitted(seq)
voteSent(ph, seq) :+ voteSent(ph, seq), !seqCommitted(seq)
sendVote(id, ph, seq, vo) :- sendVoteU(id, ph, seq, vo)
sendVote(id, ph, seq, vo) :+ sendVote(id, ph, seq, vo), !seqCommitted(seq)
majorityProposal(payloadId, seq) :- NewMajorityProposal(payloadId, seq)
majorityProposal(payloadId, seq) :+ majorityProposal(payloadId, seq), !seqCommitted(seq)

# Exchange stage
# TODO: These broadcasts include send-to-self. Make sure it's ok.
sendProposalU@r(i, payloadId, seq) :~ weakMVCIn(payloadId, seq), id(i), replicas(r)
recvProposalCount(count(id), seq) :- sendProposal(id, _, seq)
proposalQuorum(seq) :- recvProposalCount(c, seq), quorum(q), (c >= q), !stateSent(ph, seq), (ph == 1)
stateSent(1, seq) :+ proposalQuorum(seq), !seqCommitted(seq)
sameProposalCount(count(id), payloadId, seq) :- proposalQuorum(seq), sendProposal(id, payloadId, seq)
NewMajorityProposal(payloadId, seq) :- sameProposalCount(c, payloadId, seq), quorum(q), (c >= q)
NewState(1, seq) :- proposalQuorum(seq), NewMajorityProposal(_, seq)
NewState(0, seq) :- proposalQuorum(seq), !NewMajorityProposal(_, seq)

# Randomized binary consensus stage
# Round 1
NewPhase(1, seq) :- proposalQuorum(seq)
sendStateU@r(i, ph, seq, st) :~ NewPhase(ph, seq), NewState(st, seq), id(i), replicas(r)
recvStateCount(count(id), ph, seq) :- sendState(id, ph, seq, _)
stateQuorum(ph, seq) :- recvStateCount(c, ph, seq), quorum(q), (c >= q), !voteSent(ph, seq)
voteSent(ph, seq) :+ stateQuorum(ph, seq), !seqCommitted(seq)
sameStateCount(count(id), ph, seq, st) :- stateQuorum(ph, seq), sendState(id, ph, seq, st)
sameStateQuorum(ph, seq, st) :- sameStateCount(c, ph, seq, st), quorum(q), (c >= q)
NewVote(st, ph, seq) :- stateQuorum(ph, seq), sameStateQuorum(ph, seq, st)
NewVote(-1, ph, seq) :- stateQuorum(ph, seq), !sameStateQuorum(_, seq, _)

# Round 2
sendVoteU@r(i, ph, seq, vo) :~ NewVote(vo, ph, seq), id(i), replicas(r)
recvVoteCount(count(id), ph, seq) :- sendVote(id, ph, seq, _)
voteQuorum(ph, seq) :- recvVoteCount(c, ph, seq), quorum(q), (c >= q), !stateSent(ph2, seq), (ph2 > ph)
stateSent(ph+1, seq) :+ voteQuorum(ph, seq), !seqCommitted(seq)
sameVoteCount(count(id), ph, seq, vo) :- voteQuorum(ph, seq), sendVote(id, ph, seq, vo)
sameVoteQuorum(ph, seq, vo) :- sameVoteCount(c, ph, seq, vo), quorum(q), (c >= q)
# If a non-? value appears >= f+1 times
nonQValueVoteQuorum(ph, seq, vo) :- sameVoteQuorum(ph, seq, vo), (vo != -1)
weakMVCOut(payloadId, seq) :- majorityProposal(payloadId, seq), nonQValueVoteQuorum(_, seq, vo), (vo == 1)
weakMVCOut(-1, seq) :- nonQValueVoteQuorum(_, seq, vo), (vo == 0)
seqCommitted(seq) :- nonQValueVoteQuorum(_, seq, _), sameVoteCount(c, ph, seq, vo), fullQuorum(c) # Garbage collect
# If a non-? value appears at least once
nonQValueVote(ph, seq, vo) :- sendVote(_, ph, seq, vo), (vo != -1)
NewState(vo, seq) :- voteQuorum(seq), !nonQValueVoteQuorum(ph, seq, _), nonQValueVote(ph, seq, vo)
# Else
NewState(flip, seq) :- voteQuorum(ph, seq), !nonQValueVote(ph, seq), random(ph, flip) # Assumes the random relation accepts a seed as an argument and outputs 0 or 1
# TODO: Phase increment.
NewPhase(ph+1, seq) :- voteQuorum(ph, seq), !nonQValueVoteQuorum(ph, seq, _)

######################## End WeakMVC


