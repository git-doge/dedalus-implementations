.input numReplicas `repeat_iter([(num_replicas,),])`

.async clientOut `map(|(node_id, (id, ballot, payload,))| (node_id, encrypt_and_serialize(id, ballot, payload, &mut rng, &public_key))) -> dest_sink(client_send)` `null::<(i64,u32,Rc<Vec<u8>>)>()`
.async voteFromReplica `null::<(u32,u32,i64,u32,Rc<Vec<u8>>)>()` `source_stream(from_replica_source) -> map(|v| deserialize_from_bytes::<(u32,u32,i64,u32,Rc<Vec<u8>>)>(v.unwrap().1).unwrap())`
.async ballotFromLeader `null::<(u32,i64,u32)>()` `source_stream(ballot_from_leader_source) -> map(|v| deserialize_from_bytes::<(u32,i64,u32)>(v.unwrap().1).unwrap())`


# Record ballot at the time clientIn arrived
writeTimeBallot(client, id, b) :- ballotFromLeader(client, id, b)
writeTimeBallot(client, id, b) :+ writeTimeBallot(client, id, b), !committed(client, id, _, _)

allVotes(l, client, id, b, v) :- voteFromReplica(l, client, id, b, v)
allVotes(l, client, id, b, v) :+ allVotes(l, client, id, b, v), !committed(client, id, _, _)
voteCounts(count(l), client, id) :- allVotes(l, client, id, b, v)
committed(client, id, b, v) :- voteCounts(n, client, id), numReplicas(n), allVotes(l, client, id, b, v) 
# Attach ballot at the time clientIn arrived to the output
clientOut@client(id, b, v) :~ committed(client, id, _, v), writeTimeBallot(client, id, b)