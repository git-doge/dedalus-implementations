// more notes/questions for david
// - when it comes to partitioning, is the real culprit aggregating or persisting? i feel like it depends but i'd like to clarify *(aggr or negation, or cross join)
// - since persisting isn't all bad, id imagine you can prolly just partition the storage of data if it doesn't break stuff *(this is true)
// - do i have to design the coordinator with partitioning in mind? aka keeping persisting/aggregating to a min *(nah, it has properties that prevent it from being partitioned directly)
// - do i have to design EVERYTHING with partitioning in mind? *(no, implement first then you can make optimizations later, just avoid unnecessary aggrs/negs)

.input clientIn
.output clientOut

.output voteToParticipant
.input voteFromParticipant
.output instructToParticipant
.input ackFromParticipant

unanimous(size)

commitInstruct(type)
rollbackInstruct(type)

success(res)
reject(res)

AllMsg(msg) :+ AllMsg(msg)
AllVotes(i, msg, res, l_from) :+ AllVotes(i, msg, res, l_from)
AllAcks(i, msg, l_from) :+ AllAcks(i, msg, l_from)
message(i, msg) :+ message(i, msg)

AllMsg(msg) :-
    clientIn(msg)

NextMsgToAssign(choose(msg)) :-
    AllMsg(msg),
    !message(_, msg)

NextID(max(i)) :-
    message(i, _)

message(i, msg) :+
    NextMsgToAssign(msg),
    NextID(j),
    i == j + 1

// should i initialize NextToGo with 0?
NextToGo(i) :-
    lastMsgFinalized(j, _),
    i == j + 1

voteToParticipant@addr(i, msg) :~
    participantAddr(addr), # send to all participants
    message(i, msg), # getting the next message
    NextToGo(i) # everything before it must be fully resolved

AllVotes(i, msg, res, l_from) :-
    voteFromParticipant(i, msg, res, l_from)

NumYesVotes(i, msg, count(l_from)) :-
    AllVotes(i, msg, res, l_from),
    success(res)

VotedNo(i, msg) :-
    AllVotes(i, msg, res, l_from),
    reject(res)

# send commit message
msgCommitted(i, msg) :-
    NumYesVotes(i, msg, size),
    unanimous(size)

instructToParticipant@addr(i, msg, type) :~
    msgCommitted(i, msg),
    participantAddr(addr),
    commitInstruct(type)

# send rollback message
msgAborted(i, msg) :-
    VotedNo(i, msg)

instructToParticipant@addr(i, msg, type) :~
    msgAborted(i, msg),
    participantAddr(addr),
    rollbackInstruct(type)

# collecting acks before moving on
AllAcks(i, msg, l_from) :-
    ackFromParticipant(i, msg, l_from)

NumAcks(i, msg, count(l_from)) :-
    AllAcks(i, msg, l_from)

lastMsgFinalized(max(i), msg) :-
    NumAcks(i, msg, size),
    unanimous(size)