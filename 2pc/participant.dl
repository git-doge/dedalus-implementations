.input myID `repeat_iter(my_id.clone()) -> map(|p| (p,))`
.input coordinator `repeat_iter(peers.clone()) -> map(|p| (p,))`
.input verdict `repeat_iter([(true,),])`

.async voteToParticipant `null::<(u32,u32,)>()` `source_stream(vote_to_participant_source) -> map(|x| deserialize_from_bytes::<(u32,u32,)>(x.unwrap()).unwrap())`
.async voteFromParticipant `map(|(node_id, v)| (node_id, serialize_to_bytes(v))) -> dest_sink(vote_from_participant_sink)` `null::<(u32,u32,)>()`
.async instructToParticipant `null::<(u32,u32,bool,)>()` `source_stream(instruct_to_participant_source) -> map(|x| deserialize_from_bytes::<(u32,u32,bool,)>(x.unwrap()).unwrap())`
.async ackFromParticipant `map(|(node_id, v)| (node_id, serialize_to_bytes(v))) -> dest_sink(ack_from_participant_sink)` `null::<(u32,u32,u32,)>()`
    
voteFromParticipant@addr(s, p, res, i) :~ voteToParticipant(s, p), coordinator(addr), myID(i), verdict(res)
ackFromParticipant@addr(s, p, i) :~ instructToParticipant(s, p, b), coordinator(addr), myID(i)