######################## relation definitions
# EDB
.input myID `repeat_iter([(my_id,),])`
.input coordinator `repeat_iter(peers.clone()) -> map(|p| (p,))`

.async voteToParticipant `null::<(u64,u32,)>()` `source_stream(vote_to_participant_source) -> map(|x| deserialize_from_bytes::<(u64,u32,)>(x.unwrap()).unwrap())`
.async voteFromParticipant `map(|(node_id, v)| (node_id, serialize_to_bytes(v))) -> dest_sink(vote_from_participant_sink)` `null::<(u64,u32,u32,)>()`
.async commitToParticipant `null::<(u64,u32,)>()` `source_stream(commit_to_participant_source) -> map(|x| deserialize_from_bytes::<(u64,u32,)>(x.unwrap()).unwrap())`
.async ackFromParticipant `map(|(node_id, v)| (node_id, serialize_to_bytes(v))) -> dest_sink(ack_from_participant_sink)` `null::<(u64,u32,u32,)>()`

.output logVote `map(|(tid,p):(u64,u32)| format!("tid: {:?}, p: {:?}", tid, p)) -> dest_sink(file_sink)`
######################## end relation definitions

logVote(tid, p) :- voteToParticipant(tid, p)
logVoteComplete(tid, p) :+ voteToParticipant(tid, p)
voteFromParticipant@addr(tid, p, i) :~ logVoteComplete(tid, p), coordinator(addr), myID(i)
ackFromParticipant@addr(tid, p, i) :~ commitToParticipant(tid, p), coordinator(addr), myID(i)