.input voteToParticipant
.output voteFromParticipant
.input instructToParticipant
.output ackFromParticipant

.output verdictRequest
.input verdict

.output log_vote
.input vote_logged
.output log_instruct
.input instruct_logged

verdictRequest(i, msg) :-
    voteToParticipant(i, msg)

log_vote(i, msg, res) :- # vote forced to stable storage
    verdict(i, msg, res)

voteFromParticipant@addr(i, msg, res, l_from) :~
    coordinatorAddr(addr),
    local(l_from),
    vote_logged(i, msg, res) # send vote after it's been logged locally

log_instruct(i, msg, type) :- # instruct forced to stable storage
    instructToParticipant(i, msg, type)

ackFromParticipant@addr(i, msg, l_from) :~
    coordinatorAddr(addr),
    local(l_from),
    instruct_logged(i, msg, _) # send ack after instruct has been logged locally