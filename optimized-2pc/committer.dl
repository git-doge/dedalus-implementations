.input participants `repeat_iter(peers.clone()) -> map(|p| (p,))`
.input success `repeat_iter([(true,),])`
.input reject `repeat_iter([(false,),])`
.input commitInstruct `repeat_iter([(true,),])`
.input rollbackInstruct `repeat_iter([(false,),])`

.async voteFromParticipant `null::<(u32,u32,bool,u32,)>()` `source_stream(vote_from_participant_source) -> map(|v| deserialize_from_bytes::<(u32,u32,bool,u32,)>(v.unwrap()).unwrap())`
.async instructToParticipant `map(|(node_id, v):(u32,(u32,u32,bool))| (node_id, serialize_to_bytes(v))) -> dest_sink(instruct_to_participant_sink)` `null::<(u32,u32,bool,)>()`


# Phase 1b, Phase 2a
unanimous(count(addr)) :- participants(addr)

AllVotes(s, payload, res, src) :+ AllVotes(s, payload, res, src), !committed(s, payload), !aborted(s, payload)
AllVotes(s, payload, res, src) :- voteFromParticipant(s, payload, res, src)

NumYesVotes(s, payload, count(src)) :- AllVotes(s, payload, res, src), success(res)
committed(s, payload) :- NumYesVotes(s, payload, num), unanimous(num)
instructToParticipant@addr(s, payload, commit) :~ committed(s, payload), participants(addr), commitInstruct(commit)

aborted(s, payload) :- AllVotes(s, payload, res, src), reject(res)
instructToParticipant@addr(s, payload, rollback) :~ aborted(s, payload), participants(addr), rollbackInstruct(rollback)