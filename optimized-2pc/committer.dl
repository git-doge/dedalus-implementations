######################## relation definitions
# EDB
.input numParticipants `repeat_iter([(num_participants,),])`
.input numParticipantACKers `repeat_iter([(num_participant_ackers,),])`
.input participantACKerStartIDs `repeat_iter(participant_acker_start_ids.clone()) -> map(|p| (p,))` # Assume = 0,m,2m,...,n*m, for n participants and m acker partitions

.async voteFromParticipant `null::<(u32,u32,u32,)>()` `source_stream(vote_from_participant_source) -> map(|v| deserialize_from_bytes::<(u32,u32,u32,)>(v.unwrap()).unwrap())`
.async commitToParticipant `map(|(node_id, v):(u32,(u32,u32))| (node_id, serialize_to_bytes(v))) -> dest_sink(commit_to_participant_sink)` `null::<(u32,u32,)>()`

.output logCommit `map(|(tid,p):(u32,u32)| format!("tid: {:?}, p: {:?}", tid, p)) -> dest_sink(file_sink)`
# For some reason Hydroflow can't infer the type of logVoteComplete, so we define it manually:
.input logVoteComplete `null::<(u32,u32)>()`
######################## end relation definitions

# Phase 1b, Phase 2a
AllVotes(tid, payload, src) :+ AllVotes(tid, payload, src), !committed(tid, _)
AllVotes(tid, payload, src) :- voteFromParticipant(tid, payload, src)

NumYesVotes(tid, count(src)) :- AllVotes(tid, payload, src)
committed(tid, payload) :- NumYesVotes(tid, num), AllVotes(tid, payload, src), numParticipants(num) 
logCommit(tid, payload) :- committed(tid, payload)
logCommitComplete(tid, payload) :+ committed(tid, payload)
commitToParticipant@(s+(tid%n))(tid, payload) :~ logCommitComplete(tid, payload), numParticipantACKers(n), participantACKerStartIDs(s) 