######################## relation definitions
# EDB
.input id `repeat_iter([(my_id,),])`
.input numParticipants `repeat_iter([(num_participants,),])`

.output clientOut `for_each(|(tid,payload):(u32,u32)| println!("completed {:?}: {:?}", tid, payload))`

.input periodic `source_stream(periodic_source) -> map(|_| ())`
.output throughputOut `for_each(|(id,num,):(u32,u32,)| println!("total_throughput,{:?},{:?}", id, num))`

.async ackFromParticipant `null::<(u32,u32,u32,)>()` `source_stream(ack_from_participant_source) -> map(|v| deserialize_from_bytes::<(u32,u32,u32,)>(v.unwrap()).unwrap())`
######################## end relation definitions

# Phase 2b
AllAcks(tid, payload, src) :+ AllAcks(tid, payload, src), !completed(tid, _)
AllAcks(tid, payload, src) :- ackFromParticipant(tid, payload, src)

NumAcks(tid, count(src)) :- AllAcks(tid, payload, src)
completed(tid, payload) :- NumAcks(tid, num), AllAcks(tid, payload, src), numParticipants(num)
// clientOut(tid, payload) :- completed(tid, payload)

NumCompleted(count(tid)) :- completed(tid, payload)
totalCompleted(new) :+ !totalCompleted(prev), NumCompleted(new)
totalCompleted(prev) :+ totalCompleted(prev), !NumCompleted(new)
totalCompleted(prev + new) :+ totalCompleted(prev), NumCompleted(new)
throughputOut(i, num) :- totalCompleted(num), periodic(), id(i)