######################## relation definitions
# EDB
.input myID `repeat_iter([(my_id,),])`
.input numCommitters `repeat_iter([(num_committers,),])`

.async voteToParticipant `null::<(u32,u32,)>()` `source_stream(vote_to_participant_source) -> map(|x| deserialize_from_bytes::<(u32,u32,)>(x.unwrap()).unwrap())`
.async voteFromParticipant `map(|(node_id, v)| (node_id, serialize_to_bytes(v))) -> dest_sink(vote_from_participant_sink)` `null::<(u32,u32,u32,)>()`

.output logVote `map(|(tid,p):(u32,u32)| format!("tid: {:?}, p: {:?}", tid, p)) -> dest_sink(file_sink)`
# For some reason Hydroflow can't infer the type of logVoteComplete, so we define it manually:
.input logVoteComplete `null::<(u32,u32)>()`
######################## end relation definitions

logVote(tid, p) :- voteToParticipant(tid, p)
logVoteComplete(tid, p) :+ voteToParticipant(tid, p)
voteFromParticipant@(tid%n)(tid, p, i) :~ logVoteComplete(tid, p), myID(i), numCommitters(n)